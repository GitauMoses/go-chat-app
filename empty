package main

import (
	"database/sql"
	"encoding/json"
	_ "fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	_ "github.com/go-sql-driver/mysql"
	mysqlDriver "github.com/go-sql-driver/mysql"
	"github.com/golang-jwt/jwt/v5"
	_ "github.com/golang-jwt/jwt/v5"
	"github.com/gorilla/mux"
	"github.com/gorilla/websocket"
	"golang.org/x/crypto/bcrypt"
)

// === Configuration (change via environment) ===
// Default DSN for XAMPP on Windows (root without password):
//
//	root:@tcp(127.0.0.1:3306)/chat_app?parseTime=true
//
// If root has a password or you use another user, set CHAT_DSN env var.
var DSN = getEnv("CHAT_DSN", "root:@tcp(127.0.0.1:3306)/chat_app?parseTime=true&loc=UTC")
var ADDR = getEnv("CHAT_ADDR", ":8080")
var jwtKey = []byte("my_secret_key")

var db *sql.DB
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // allow all origins for testing
	},
}

// User model (matches chat_app.users exactly)
type User struct {
	ID        int64      `json:"id"`
	Username  string     `json:"username"`
	Status    string     `json:"status"`
	LastSeen  *time.Time `json:"last_seen,omitempty"`
	CreatedAt time.Time  `json:"created_at"`
}

// request payload for register
type registerRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type loginRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type loginResponse struct {
	User  User   `json:"user"`
	Token string `json:"token"`
}

type createConversationRequest struct {
	ParticipantIDs []int64 `json:"participant_ids"`
	Name           string  `json:"name"`
	IsGroup        bool    `json:"is_group"`
}

type conversationResponse struct {
	ID             int64     `json:"id"`
	Name           string    `json:"name"`
	IsGroup        bool      `json:"is_group"`
	ParticipantIDs []int64   `json:"participant_ids"`
	CreatedAt      time.Time `json:"created_at"`
}

type sendMessageRequest struct {
	ConversationID int64  `json:"conversation_id"`
	SenderID       int64  `json:"sender_id"`
	Content        string `json:"content"`
	MessageType    string `json:"message_type"` // text, image, video, file
}

type messageResponse struct {
	ID             int64     `json:"id"`
	ConversationID int64     `json:"conversation_id"`
	SenderID       int64     `json:"sender_id"`
	Content        string    `json:"content"`
	MessageType    string    `json:"message_type"`
	CreatedAt      time.Time `json:"created_at"`
}

type Client struct {
	ID   int64
	Conn *websocket.Conn
}

type Hub struct {
	Clients    map[int64]*Client // userID -> client
	Register   chan *Client
	Unregister chan *Client
	Broadcast  chan Message
}

type Message struct {
	ID             int64   `json:"id"`
	ConversationID int64   `json:"conversation_id"`
	SenderID       int64   `json:"sender_id"`
	Content        string  `json:"content"`
	MessageType    string  `json:"message_type"`
	RecipientIDs   []int64 `json:"recipient_ids"`
	CreatedAt      string  `json:"created_at"`
}

var hub = Hub{
	Clients:    make(map[int64]*Client),
	Register:   make(chan *Client),
	Unregister: make(chan *Client),
	Broadcast:  make(chan Message),
}

// ==== Hub run loop ====
func (h *Hub) Run() {
	for {
		select {
		case client := <-h.Register:
			h.Clients[client.ID] = client
			log.Printf("User %d connected, total clients: %d", client.ID, len(h.Clients))

		case client := <-h.Unregister:
			if _, ok := h.Clients[client.ID]; ok {
				client.Conn.Close()
				delete(h.Clients, client.ID)
				log.Printf("User %d disconnected, total clients: %d", client.ID, len(h.Clients))
			}

		case message := <-h.Broadcast:
			// Save message to DB first
			msgID, err := saveMessage(message)
			if err != nil {
				log.Printf("Failed to save message: %v", err)
				continue
			}
			message.ID = msgID
			loc, _ := time.LoadLocation("Africa/Nairobi")
			message.CreatedAt = time.Now().In(loc).Format(time.RFC3339)
			// ISO string

			// Broadcast to recipients
			for _, uid := range message.RecipientIDs {
				if c, ok := h.Clients[uid]; ok {
					if err := c.Conn.WriteJSON(message); err != nil {
						log.Printf("Error sending message to user %d: %v", uid, err)
						c.Conn.Close()
						delete(h.Clients, uid)
					}
				}
			}
		}
	}
}

// ==== Save message to DB ====
func saveMessage(msg Message) (int64, error) {
	// Convert CreatedAt string to time.Time
	createdAt, err := time.Parse(time.RFC3339, msg.CreatedAt)
	if err != nil {
		createdAt = time.Now().UTC()
	}

	res, err := db.Exec(
		"INSERT INTO messages (conversation_id, sender_id, content, message_type, created_at) VALUES (?, ?, ?, ?, ?)",
		msg.ConversationID, msg.SenderID, msg.Content, msg.MessageType, createdAt,
	)
	if err != nil {
		return 0, err
	}
	msgID, _ := res.LastInsertId()

	// Save message status for participants
	rows, err := db.Query(`
        SELECT user_id, status
        FROM conversation_participants cp
        JOIN users u ON cp.user_id = u.id
        WHERE conversation_id = ?`, msg.ConversationID)
	if err != nil {
		return msgID, err
	}
	defer rows.Close()

	for rows.Next() {
		var uid int64
		var status string
		rows.Scan(&uid, &status)
		mStatus := "sent"
		if status == "online" {
			mStatus = "delivered"
		}
		db.Exec("INSERT INTO message_status (message_id, user_id, status) VALUES (?, ?, ?)", msgID, uid, mStatus)
	}

	return msgID, nil
}

// ==== WebSocket handler ====
func wsHandler(w http.ResponseWriter, r *http.Request) {
	userIDStr := r.URL.Query().Get("user_id")
	if userIDStr == "" {
		http.Error(w, "user_id required", http.StatusBadRequest)
		return
	}
	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		http.Error(w, "invalid user_id", http.StatusBadRequest)
		return
	}

	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("WebSocket upgrade error:", err)
		return
	}

	client := &Client{ID: userID, Conn: conn}
	hub.Register <- client
	defer func() { hub.Unregister <- client }()

	// Send initial message
	conn.WriteJSON(map[string]string{"message": "connected to chat server"})

	for {
		var msg Message
		if err := conn.ReadJSON(&msg); err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				log.Printf("WebSocket closed for user %d: %v", userID, err)
			}
			break
		}

		// Set timestamp in ISO string for DB
		loc, _ := time.LoadLocation("Africa/Nairobi")
		msg.CreatedAt = time.Now().In(loc).Format(time.RFC3339)
		hub.Broadcast <- msg

	}
}

// CORS Middleware
func corsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusNoContent)
			return
		}
		next.ServeHTTP(w, r)
	})
}

func main() {
	// open DB
	var err error
	db, err = sql.Open("mysql", DSN)
	if err != nil {
		log.Fatalf("failed to open db: %v", err)
	}
	// small pool tuning
	db.SetConnMaxLifetime(5 * time.Minute)
	db.SetMaxOpenConns(20)
	db.SetMaxIdleConns(10)

	// ping DB
	if err := db.Ping(); err != nil {
		log.Fatalf("failed to ping db: %v", err)
	}
	log.Println("connected to DB (chat_app)")

	go hub.Run()
	// router
	r := mux.NewRouter()
	r.Use(corsMiddleware)
	r.HandleFunc("/health", healthHandler).Methods("GET", "OPTIONS")
	api := r.PathPrefix("/api").Subrouter()
	api.HandleFunc("/register", registerHandler).Methods("POST", "OPTIONS")
	api.HandleFunc("/login", loginHandler).Methods("POST", "OPTIONS")
	api.HandleFunc("/users", listUsersHandler).Methods("GET", "OPTIONS")
	api.HandleFunc("/conversations", createConversationHandler).Methods("POST", "OPTIONS")
	api.HandleFunc("/conversations", listConversationsHandler).Methods("GET", "OPTIONS")
	api.HandleFunc("/messages", sendMessageHandler).Methods("POST", "OPTIONS")
	api.HandleFunc("/messages", listMessagesHandler).Methods("GET", "OPTIONS")

	r.HandleFunc("/ws", wsHandler)

	// start server
	log.Printf("server listening on %s\n", ADDR)
	if err := http.ListenAndServe(ADDR, r); err != nil {
		log.Fatalf("server error: %v", err)
	}
}

func healthHandler(w http.ResponseWriter, _ *http.Request) {
	w.WriteHeader(200)
	w.Write([]byte("ok"))
}

func registerHandler(w http.ResponseWriter, r *http.Request) {
	var req registerRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		httpError(w, http.StatusBadRequest, "invalid JSON body")
		return
	}
	req.Username = strings.TrimSpace(req.Username)
	if len(req.Username) < 3 {
		httpError(w, http.StatusBadRequest, "username must be at least 3 characters")
		return
	}
	if len(req.Password) < 6 {
		httpError(w, http.StatusBadRequest, "password must be at least 6 characters")
		return
	}

	// hash password
	pwHash, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		httpError(w, http.StatusInternalServerError, "failed to hash password")
		return
	}

	// insert into users (columns: username, password_hash)
	res, err := db.Exec("INSERT INTO users (username, password_hash) VALUES (?, ?)", req.Username, string(pwHash))
	if err != nil {
		// detect duplicate username (MySQL error 1062)
		if me, ok := err.(*mysqlDriver.MySQLError); ok && me.Number == 1062 {
			httpError(w, http.StatusConflict, "username already exists")
			return
		}
		httpError(w, http.StatusInternalServerError, "db error: "+err.Error())
		return
	}

	id, _ := res.LastInsertId()

	// fetch inserted user to return created_at and default fields
	u := User{}
	err = db.QueryRow("SELECT id, username, status, last_seen, created_at FROM users WHERE id = ?", id).
		Scan(&u.ID, &u.Username, &u.Status, &u.LastSeen, &u.CreatedAt)
	if err != nil {
		httpError(w, http.StatusInternalServerError, "failed to read created user: "+err.Error())
		return
	}

	uResp := map[string]any{"user": u}
	respondJSON(w, http.StatusCreated, uResp)
}

// login Logic
func loginHandler(w http.ResponseWriter, r *http.Request) {
	var req loginRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		httpError(w, http.StatusBadRequest, "invalid JSON body")
		return
	}

	req.Username = strings.TrimSpace(req.Username)
	if req.Username == "" || req.Password == "" {
		httpError(w, http.StatusBadRequest, "username and password required")
		return
	}

	// fetch user
	u := User{}
	var passwordHash string
	err := db.QueryRow("SELECT id, username, password_hash, status, last_seen, created_at FROM users WHERE username = ?", req.Username).
		Scan(&u.ID, &u.Username, &passwordHash, &u.Status, &u.LastSeen, &u.CreatedAt)
	if err != nil {
		if err == sql.ErrNoRows {
			httpError(w, http.StatusUnauthorized, "invalid credentials")
			return
		}
		httpError(w, http.StatusInternalServerError, "db error: "+err.Error())
		return
	}

	// verify password
	if err := bcrypt.CompareHashAndPassword([]byte(passwordHash), []byte(req.Password)); err != nil {
		httpError(w, http.StatusUnauthorized, "invalid credentials")
		return
	}

	// update status online + last_seen
	_, _ = db.Exec("UPDATE users SET status='online', last_seen=NOW() WHERE id=?", u.ID)
	u.Status = "online"
	now := time.Now()
	u.LastSeen = &now

	// create JWT token
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id": u.ID,
		"exp":     time.Now().Add(24 * time.Hour).Unix(),
	})
	tokenStr, _ := token.SignedString(jwtKey)

	respondJSON(w, http.StatusOK, loginResponse{User: u, Token: tokenStr})
}

// listing users
func listUsersHandler(w http.ResponseWriter, r *http.Request) {
	rows, err := db.Query("SELECT id, username, status, last_seen, created_at FROM users ORDER BY username ASC")
	if err != nil {
		httpError(w, http.StatusInternalServerError, "db error: "+err.Error())
		return
	}
	defer rows.Close()

	users := []User{}
	for rows.Next() {
		u := User{}
		if err := rows.Scan(&u.ID, &u.Username, &u.Status, &u.LastSeen, &u.CreatedAt); err != nil {
			httpError(w, http.StatusInternalServerError, "scan error: "+err.Error())
			return
		}
		users = append(users, u)
	}

	respondJSON(w, http.StatusOK, map[string]any{"users": users})
}

// creating conversations
func createConversationHandler(w http.ResponseWriter, r *http.Request) {
	var req createConversationRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		httpError(w, http.StatusBadRequest, "invalid JSON body")
		return
	}

	if len(req.ParticipantIDs) < 2 {
		httpError(w, http.StatusBadRequest, "at least 2 participants required")
		return
	}

	// Insert into conversations
	res, err := db.Exec("INSERT INTO conversations (name, is_group) VALUES (?, ?)",
		sql.NullString{String: req.Name, Valid: req.IsGroup}, req.IsGroup)
	if err != nil {
		httpError(w, http.StatusInternalServerError, "db error: "+err.Error())
		return
	}

	convID, _ := res.LastInsertId()

	// Insert participants
	for _, uid := range req.ParticipantIDs {
		_, _ = db.Exec("INSERT INTO conversation_participants (conversation_id, user_id) VALUES (?, ?)", convID, uid)
	}

	resp := conversationResponse{
		ID:             convID,
		Name:           req.Name,
		IsGroup:        req.IsGroup,
		ParticipantIDs: req.ParticipantIDs,
		CreatedAt:      time.Now(),
	}

	respondJSON(w, http.StatusCreated, map[string]any{"conversation": resp})
}

// listing conversation
func listConversationsHandler(w http.ResponseWriter, r *http.Request) {
	// For simplicity, take user_id as query param for now
	userID := r.URL.Query().Get("user_id")
	if userID == "" {
		httpError(w, http.StatusBadRequest, "user_id required")
		return
	}

	rows, err := db.Query(`
		SELECT c.id, c.name, c.is_group
		FROM conversations c
		JOIN conversation_participants cp ON cp.conversation_id = c.id
		WHERE cp.user_id = ?`, userID)
	if err != nil {
		httpError(w, http.StatusInternalServerError, "db error: "+err.Error())
		return
	}
	defer rows.Close()

	convs := []conversationResponse{}
	for rows.Next() {
		var c conversationResponse
		var name sql.NullString
		if err := rows.Scan(&c.ID, &name, &c.IsGroup); err != nil {
			httpError(w, http.StatusInternalServerError, "scan error: "+err.Error())
			return
		}
		if name.Valid {
			c.Name = name.String
		} else {
			c.Name = ""
		}

		// fetch participant ids
		pRows, _ := db.Query("SELECT user_id FROM conversation_participants WHERE conversation_id = ?", c.ID)
		var pids []int64
		for pRows.Next() {
			var pid int64
			pRows.Scan(&pid)
			pids = append(pids, pid)
		}
		pRows.Close()
		c.ParticipantIDs = pids

		convs = append(convs, c)
	}

	respondJSON(w, http.StatusOK, map[string]any{"conversations": convs})
}

// sending messages
func sendMessageHandler(w http.ResponseWriter, r *http.Request) {
	var req sendMessageRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		httpError(w, http.StatusBadRequest, "invalid JSON body")
		return
	}

	// insert message
	res, err := db.Exec("INSERT INTO messages (conversation_id, sender_id, content, message_type) VALUES (?, ?, ?, ?)",
		req.ConversationID, req.SenderID, req.Content, req.MessageType)
	if err != nil {
		httpError(w, http.StatusInternalServerError, "db error: "+err.Error())
		return
	}
	msgID, _ := res.LastInsertId()

	// get participants
	rows, _ := db.Query("SELECT user_id, status FROM conversation_participants cp JOIN users u ON cp.user_id = u.id WHERE conversation_id = ?", req.ConversationID)
	for rows.Next() {
		var uid int64
		var status string
		rows.Scan(&uid, &status)

		msgStatus := "sent"
		if status == "online" {
			msgStatus = "delivered"
		}

		db.Exec("INSERT INTO message_status (message_id, user_id, status) VALUES (?, ?, ?)", msgID, uid, msgStatus)
	}
	rows.Close()

	resp := messageResponse{
		ID:             msgID,
		ConversationID: req.ConversationID,
		SenderID:       req.SenderID,
		Content:        req.Content,
		MessageType:    req.MessageType,
		CreatedAt:      time.Now(),
	}

	respondJSON(w, http.StatusCreated, map[string]any{"message": resp})
}

// fetching messages
func listMessagesHandler(w http.ResponseWriter, r *http.Request) {
	convID := r.URL.Query().Get("conversation_id")
	if convID == "" {
		httpError(w, http.StatusBadRequest, "conversation_id required")
		return
	}

	rows, err := db.Query("SELECT id, conversation_id, sender_id, content, message_type, created_at FROM messages WHERE conversation_id=? ORDER BY created_at ASC", convID)
	if err != nil {
		httpError(w, http.StatusInternalServerError, "db error: "+err.Error())
		return
	}
	defer rows.Close()

	msgs := []messageResponse{}
	for rows.Next() {
		var m messageResponse
		if err := rows.Scan(&m.ID, &m.ConversationID, &m.SenderID, &m.Content, &m.MessageType, &m.CreatedAt); err != nil {
			httpError(w, http.StatusInternalServerError, err.Error())
			return
		}
		msgs = append(msgs, m)
	}

	respondJSON(w, http.StatusOK, map[string]any{"messages": msgs})
}

// ==== helpers ====
func httpError(w http.ResponseWriter, status int, msg string) {
	respondJSON(w, status, map[string]string{"error": msg})
}

func respondJSON(w http.ResponseWriter, status int, payload any) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	_ = json.NewEncoder(w).Encode(payload)
}

func getEnv(k, fallback string) string {
	if v := os.Getenv(k); v != "" {
		return v
	}
	return fallback
}





































<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Go Chat App - Final Ideal Chat Tester</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; display: flex; gap: 20px; padding: 20px; background-color: #f4f4f4; }
        .panel { background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); flex: 1; min-width: 300px; }
        h2 { border-bottom: 2px solid #eee; padding-bottom: 10px; margin-top: 0; }
        input[type="text"], input[type="password"] { width: 100%; padding: 8px; margin-bottom: 10px; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; }
        button { padding: 10px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px; }
        button:hover { background-color: #0056b3; }

        /* --- Chat Window Styling --- */
        #log, #messages { height: 300px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-top: 10px; background-color: #e5ddd5; }
        #messages {
            display: flex;
            flex-direction: column;
        }
        .message-bubble {
            max-width: 75%;
            margin: 5px 0;
            padding: 8px 10px;
            border-radius: 8px;
            line-height: 1.4;
            display: flex;
            flex-direction: column;
            box-shadow: 0 1px 0.5px rgba(0,0,0,0.13);
        }
        .message-bubble.sent {
            background-color: #dcf8c6;
            align-self: flex-end;
            margin-left: auto;
            align-items: flex-end;
        }
        .message-bubble.received {
            background-color: #ffffff;
            align-self: flex-start;
            margin-right: auto;
            align-items: flex-start;
        }
        .msg-sender {
            font-size: 12px;
            font-weight: bold;
            color: #34b7f1;
            margin-bottom: 2px;
        }
        .msg-text {
            font-size: 14px;
        }
        .msg-info {
            font-size: 10px;
            color: #8c8c8c;
            margin-top: 3px;
            padding-left: 5px;
        }

        .user-item, .conversation-item { padding: 8px; border-bottom: 1px solid #eee; cursor: pointer; }
        .user-item:hover, .conversation-item:hover { background-color: #e9e9e9; }
        .chat-container { display: none; }
    </style>
</head>
<body>

<div class="panel" id="auth-panel">
    <h2>Authentication</h2>
    <div id="auth-forms">
        <input type="text" id="reg-username" placeholder="Register Username">
        <input type="password" id="reg-password" placeholder="Register Password">
        <button onclick="registerUser()">Register</button>
        <hr style="margin: 15px 0;">
        <input type="text" id="login-username" placeholder="Login Username">
        <input type="password" id="login-password" placeholder="Login Password">
        <button onclick="loginUser()">Login</button>
    </div>
    <div id="logged-in-status" style="display:none; margin-top: 15px;">
        <p style="color: green; font-weight: bold;">
            Logged in as: <span id="current-username"></span> (ID: <span id="current-user-id"></span>)
        </p>
        <button onclick="logoutUser()" style="background-color: #dc3545;">Logout</button>
    </div>
</div>

<div class="panel" id="users-panel" style="display:none;">
    <h2>Users</h2>
    <button onclick="listUsers()">Refresh Users & Status</button>
    <div id="user-list" style="margin-top: 10px;"></div>
</div>

<div class="panel" id="conv-panel" style="display:none;">
    <h2>Conversations</h2>
    <button onclick="listConversations()">List Conversations</button>
    <div id="conversation-list" style="margin-top: 10px;"></div>

    <h3 style="margin-top: 20px;">Create New Conversation</h3>
    <p>Select participants from the 'Users' panel and click to start.</p>
    <div id="create-conv-participants" style="margin-bottom: 10px; font-weight: bold;">Participants: (Your ID included automatically)</div>
    <input type="text" id="group-name" placeholder="Group Name (Optional)">
    <button onclick="startOneToOneChat()">Start 1-on-1 Chat</button>
    <button onclick="startGroupChat()">Start Group Chat</button>
</div>

<div class="panel chat-container" id="chat-panel">
    <h2>Chat Window: <span id="current-conv-name"></span> (ID: <span id="current-conv-id"></span>)</h2>
    <div id="messages"></div>
    <input type="text" id="chat-input" placeholder="Type your message...">
    <button onclick="sendMessage()">Send</button>
</div>

<div class="panel">
    <h2>Log / Status</h2>
    <div id="log"></div>
</div>

<script>
    // Configuration
    const API_BASE_URL = "http://localhost:8080/api";
    const WS_BASE_URL = "ws://localhost:8080/ws";

    // Globals
    let CURRENT_USER = null;
    let JWT_TOKEN = "";
    let ALL_USERS = [];
    let SELECTED_PARTICIPANTS = new Set();
    let CURRENT_CONVERSATION_ID = null;
    let WEBSOCKET = null;
    let ACTIVE_CONVERSATIONS = new Map();
    let PENDING_MESSAGES = new Map();

    // --- Utility Functions ---

    function log(message, type = 'info') {
        const logDiv = $('#log');
        logDiv.append(`<p style="color: ${type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue'}; margin: 2px 0;">[${type.toUpperCase()}] ${message}</p>`);
        logDiv.scrollTop(logDiv[0].scrollHeight);
    }

    function getUserName(id) {
        return ALL_USERS.find(u => u.id === id)?.username || `User ${id}`;
    }

    // --- 1. Auth Handlers ---
    function registerUser() {
        const username = $('#reg-username').val();
        const password = $('#reg-password').val();
        $.ajax({
            url: `${API_BASE_URL}/register`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ username: username, password: password }),
            success: function(response) {
                log(`Registration successful for ${username}. Please log in.`, 'success');
            },
            error: function(xhr) {
                log(`Registration failed: ${xhr.responseJSON ? xhr.responseJSON.error : 'Server error'}`, 'error');
            }
        });
    }

    function loginUser() {
        const username = $('#login-username').val();
        const password = $('#login-password').val();
        $.ajax({
            url: `${API_BASE_URL}/login`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ username: username, password: password }),
            success: function(response) {
                CURRENT_USER = response.user;
                JWT_TOKEN = response.token;
                log(`Login successful. Welcome ${CURRENT_USER.username}!`, 'success');
                $('#logged-in-status').show();
                $('#current-username').text(CURRENT_USER.username);
                $('#current-user-id').text(CURRENT_USER.id);
                $('#auth-forms').hide();
                $('#users-panel, #conv-panel').show();

                connectWebSocket();
                listUsers();
                listConversations();
            },
            error: function(xhr) {
                log(`Login failed: ${xhr.responseJSON ? xhr.responseJSON.error : 'Server error'}`, 'error');
            }
        });
    }

    function logoutUser() {
        if (!CURRENT_USER) return;

        // 1. Call the logout API to set status to 'offline' and trigger WS broadcast
        $.ajax({
            url: `${API_BASE_URL}/logout`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ user_id: CURRENT_USER.id }),
            success: function(response) {
                log(`Logout successful. Status is now offline.`, 'success');
            },
            error: function(xhr) {
                log(`Logout failed: ${xhr.responseJSON ? xhr.responseJSON.error : 'Server error'}`, 'error');
            },
            complete: function() {
                // 2. Clear frontend state and reset UI regardless of API success
                if (WEBSOCKET && WEBSOCKET.readyState === WebSocket.OPEN) {
                    WEBSOCKET.close(); // Server also tries to close it, but client-side close is good practice.
                }
                CURRENT_USER = null;
                JWT_TOKEN = "";
                // Clear UI
                $('#logged-in-status').hide();
                $('#auth-forms').show();
                $('#users-panel, #conv-panel, #chat-panel').hide();
                $('#messages').empty();
                // We call listUsers here to force our own status to update on the list
                listUsers();
            }
        });
    }


    // --- 2. User/Conversation Handlers ---

    function listUsers(logMessage = true) {
        if (logMessage) { log("Fetching users...", 'info'); }

        $.ajax({
            url: `${API_BASE_URL}/users`,
            method: 'GET',
            headers: { 'Authorization': JWT_TOKEN ? `Bearer ${JWT_TOKEN}` : '' },
            success: function(response) {
                const users = response.users || [];
                ALL_USERS = users;
                const list = $('#user-list').empty();
                users.forEach(user => {
                    // Skip logged-in user in the selectable list, but keep them in ALL_USERS for name lookups
                    if (CURRENT_USER && user.id === CURRENT_USER.id) return;

                    const isSelected = SELECTED_PARTICIPANTS.has(user.id);
                    list.append(`
                        <div class="user-item" data-user-id="${user.id}" onclick="toggleParticipant(${user.id}, this)"
                            style="background-color: ${isSelected ? '#d1e7dd' : 'white'};">
                            ID: ${user.id}, Username: ${user.username}
                            (<span style="color: ${user.status === 'online' ? 'green' : 'red'};">${user.status}</span>)
                        </div>
                    `);
                });
                updateParticipantList();
            },
            error: function(xhr) {
                log(`List users failed: ${xhr.status} (May be expected if not logged in)`, 'error');
            }
        });
    }

    function toggleParticipant(id, element) {
        if (SELECTED_PARTICIPANTS.has(id)) {
            SELECTED_PARTICIPANTS.delete(id);
            $(element).css('background-color', 'white');
        } else {
            SELECTED_PARTICIPANTS.add(id);
            $(element).css('background-color', '#d1e7dd');
        }
        updateParticipantList();
    }

    function updateParticipantList() {
        let usernames = [];
        SELECTED_PARTICIPANTS.forEach(id => {
            usernames.push(getUserName(id));
        });
        $('#create-conv-participants').text(`Participants: ${usernames.join(', ')} (Your ID included automatically)`);
    }

    function createConversation(name, isGroup) {
        if (!JWT_TOKEN || !CURRENT_USER) { log("Please login first.", 'error'); return; }
        const participantIDs = Array.from(SELECTED_PARTICIPANTS);
        participantIDs.push(CURRENT_USER.id);

        if (!isGroup && participantIDs.length !== 2) {
            log("A 1-on-1 chat requires exactly one other participant to be selected.", 'error');
            return;
        }
        if (isGroup && participantIDs.length < 3) {
            log("A group chat requires at least two participants (3 total).", 'error');
            return;
        }

        $.ajax({
            url: `${API_BASE_URL}/conversations`,
            method: 'POST',
            headers: { 'Authorization': `Bearer ${JWT_TOKEN}` },
            contentType: 'application/json',
            data: JSON.stringify({
                participant_ids: participantIDs,
                name: isGroup ? (name || 'New Group') : null,
                is_group: isGroup
            }),
            success: function(response) {
                const conv = response.conversation;
                log(`Conversation created/retrieved! ID: ${conv.id}`, 'success');

                let convName = conv.name;
                if (!conv.is_group) {
                    const otherID = conv.participant_ids.find(id => id !== CURRENT_USER.id);
                    convName = getUserName(otherID);
                } else if (!convName) {
                    convName = "Group Chat";
                }

                ACTIVE_CONVERSATIONS.set(conv.id, conv);

                switchConversation(conv.id, convName);
                listConversations(); // CRUCIAL: Refreshes the conversation list
                SELECTED_PARTICIPANTS.clear();
                listUsers();
            },
            error: function(xhr) {
                log(`Create conversation failed: ${xhr.responseJSON ? xhr.responseJSON.error : 'Server error'}`, 'error');
            }
        });
    }

    function startOneToOneChat() {
        createConversation(null, false);
    }

    function startGroupChat() {
        const name = $('#group-name').val();
        createConversation(name, true);
    }

    function listConversations() {
        if (!JWT_TOKEN || !CURRENT_USER) { return; }
        $.ajax({
            url: `${API_BASE_URL}/conversations?user_id=${CURRENT_USER.id}`,
            method: 'GET',
            headers: { 'Authorization': `Bearer ${JWT_TOKEN}` },
            success: function(response) {
                const conversations = response.conversations || [];
                const list = $('#conversation-list').empty();
                ACTIVE_CONVERSATIONS.clear();

                conversations.forEach(conv => {
                    let convName = conv.name;

                    ACTIVE_CONVERSATIONS.set(conv.id, conv);

                    if (!conv.is_group) {
                        const otherParticipants = conv.participant_ids.filter(id => id !== CURRENT_USER.id);
                        if (otherParticipants.length === 1) {
                            convName = getUserName(otherParticipants[0]);
                        } else {
                            convName = "Unknown 1-on-1";
                        }
                    } else if (!convName) {
                        convName = "Group Chat";
                    }

                    list.append(`
                        <div class="conversation-item" onclick="switchConversation(${conv.id}, '${convName.replace(/'/g, "\\'")}')">
                            [${conv.is_group ? 'GROUP' : '1-ON-1'}] ${convName} (ID: ${conv.id})
                        </div>
                    `);
                });
            },
            error: function(xhr) {
                log(`List conversations failed: ${xhr.status}`, 'error');
            }
        });
    }

    // --- 3. Chat Handlers ---
    function switchConversation(convID, convName) {
        CURRENT_CONVERSATION_ID = convID;
        $('#current-conv-id').text(convID);
        $('#current-conv-name').text(convName);
        $('#chat-panel').show();
        $('#messages').empty();
        log(`Switched to Conversation: ${convName}`, 'success');

        loadMessages(convID);
    }

    function loadMessages(convID) {
        $.ajax({
            url: `${API_BASE_URL}/messages?conversation_id=${convID}`,
            method: 'GET',
            headers: { 'Authorization': `Bearer ${JWT_TOKEN}` },
            success: function(response) {
                const messages = response.messages || [];
                messages.forEach(msg => displayMessage(msg));
                log(`Loaded ${messages.length} previous messages.`, 'info');
            },
            error: function(xhr) {
                log(`Load messages failed: ${xhr.responseJSON ? xhr.responseJSON.error : 'Server error'}`, 'error');
            }
        });
    }

    function sendMessage() {
        if (!WEBSOCKET || WEBSOCKET.readyState !== WebSocket.OPEN) {
            log("WebSocket is not connected.", 'error');
            return;
        }
        if (!CURRENT_CONVERSATION_ID) {
            log("Please select a conversation first.", 'error');
            return;
        }

        const content = $('#chat-input').val();
        if (!content.trim()) return;

        // Create a unique temporary ID for the optimistic update
        const tempID = 'temp-' + Date.now();

        // 1. Create the message object
        const message = {
            conversation_id: CURRENT_CONVERSATION_ID,
            sender_id: CURRENT_USER.id,
            content: content,
            message_type: 'text',
        };

        // 2. OPTIMISTIC UPDATE: Display message immediately
        const tempMsg = {...message, id: tempID, created_at: new Date().toISOString()};

        // Store the temporary ID and its DOM element
        const element = displayMessage(tempMsg);
        PENDING_MESSAGES.set(tempID, element);

        // 3. Send message through WebSocket
        WEBSOCKET.send(JSON.stringify(message));
        $('#chat-input').val('');
    }

    function displayMessage(msg) {
        const isSent = msg.sender_id === CURRENT_USER.id;
        const conv = ACTIVE_CONVERSATIONS.get(msg.conversation_id);
        const isGroup = conv ? conv.is_group : false;
        const username = getUserName(msg.sender_id);

        const date = new Date(msg.created_at);
        const timeStr = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        const bubbleClass = isSent ? 'sent' : 'received';

        const senderNameHTML = (!isSent && isGroup) ? `<span class="msg-sender">${username}</span>` : '';

        const $messageHtml = $(`
            <div class="message-bubble ${bubbleClass}" data-id="${msg.id || ''}">
                ${senderNameHTML}
                <span class="msg-text">${msg.content}</span>
                <span class="msg-info">${timeStr}</span>
            </div>
        `);

        const msgDiv = $('#messages');
        msgDiv.append($messageHtml);
        msgDiv.scrollTop(msgDiv[0].scrollHeight);

        return $messageHtml; // Return the created element for pending tracking
    }

    // --- 4. WebSocket Handler ---
    function connectWebSocket() {
        if (WEBSOCKET && WEBSOCKET.readyState === WebSocket.OPEN) {
            WEBSOCKET.close();
        }

        WEBSOCKET = new WebSocket(`${WS_BASE_URL}?user_id=${CURRENT_USER.id}`);

        WEBSOCKET.onopen = function() {
            log("WebSocket connection established.", 'success');
        };

        WEBSOCKET.onmessage = function(event) {
            try {
                const msg = JSON.parse(event.data);
                if (msg.message === "connected to chat server") {
                    log(msg.message, 'info');
                    return;
                }

                // === 1. Handle Status Update Message Type (Login/Logout) ===
                if (msg.type === "status_update") {
                    log(`Status change for User ${msg.user_id}: ${msg.new_status}`, 'info');

                    // Update the ALL_USERS array status
                    const userIndex = ALL_USERS.findIndex(u => u.id === msg.user_id);
                    if (userIndex !== -1) {
                        ALL_USERS[userIndex].status = msg.new_status;
                    }
                    // Re-render the user list to show the change immediately
                    listUsers(false);
                    return;
                }

                // === 2. Handle Regular Chat Messages ===

                // 2a. If it's an echo back of our own sent message (to confirm server insert/delivery)
                if (msg.sender_id === CURRENT_USER.id) {
                    let foundTemp = false;

                    PENDING_MESSAGES.forEach((element, tempID) => {
                        // Match based on content (since we can't rely on temp ID from Go server)
                        if (element.find('.msg-text').text() === msg.content) {
                            element.remove(); // Remove the temporary optimistic bubble
                            PENDING_MESSAGES.delete(tempID);
                            foundTemp = true;
                        }
                    });

                    if (foundTemp && msg.conversation_id === CURRENT_CONVERSATION_ID) {
                        displayMessage(msg); // Display the final, server-confirmed message
                        return;
                    }
                }

                // 2b. Message from another user, or an echo that wasn't matched/removed
                if (msg.conversation_id === CURRENT_CONVERSATION_ID) {
                    displayMessage(msg);
                } else {
                    // CRUCIAL: If a message arrives for a non-active conversation,
                    // it might be a brand new conversation (group or 1-on-1) that we were just added to.
                    log(`New message received for Conversation ID ${msg.conversation_id}. Refreshing conversations...`, 'info');
                    listConversations();
                }

            } catch (e) {
                log(`Error parsing message: ${e.message}`, 'error');
            }
        };

        WEBSOCKET.onclose = function(event) {
            log(`WebSocket connection closed. Code: ${event.code}`, 'error');
            WEBSOCKET = null;
        };

        WEBSOCKET.onerror = function(error) {
            log(`WebSocket error: ${error.message}`, 'error');
        };
    }

    // Initial setup
    $(document).ready(function() {
        // Add Enter key listener for chat input
        $('#chat-input').keypress(function(e) {
            if(e.which == 13) {
                sendMessage();
            }
        });
    });

</script>
</body>
</html>